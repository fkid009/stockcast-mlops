#
# docker‑compose.yml
#
x-airflow-common: &airflow-common-env
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  PYTHONPATH: /opt/airflow/scripts:${PYTHONPATH}

services:
  # ─────────── Infra ───────────
  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./postgres-init/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:latest
    restart: always

  # ─────────── Airflow ───────────
  airflow-webserver:
    image: airflow-custom:latest
    depends_on: [postgres, redis]
    environment: *airflow-common-env
    command: webserver
    ports: ["8080:8080"]
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./mlruns:/opt/airflow/mlruns

  airflow-scheduler:
    image: airflow-custom:latest
    depends_on: [airflow-webserver]
    environment: *airflow-common-env
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./mlruns:/opt/airflow/mlruns

  airflow-worker:
    image: airflow-custom:latest
    depends_on: [airflow-webserver]
    environment: *airflow-common-env
    command: celery worker
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./mlruns:/opt/airflow/mlruns

  airflow-init:
    image: airflow-custom:latest
    depends_on: [postgres, redis]
    environment: *airflow-common-env
    entrypoint: /bin/bash
    command: >
      -c "
        airflow db init && \
        airflow users create --username admin --firstname admin --lastname admin \
          --role Admin --email admin@example.com --password admin
      "

  # ─────────── MLflow UI ───────────
  mlflow:
    image: python:3.8-slim
    container_name: mlflow
    working_dir: /opt/mlflow
    entrypoint: >
      sh -c "pip install --no-cache-dir mlflow &&
             mlflow server --host 0.0.0.0 --port 5000
             --backend-store-uri sqlite:///mlruns.db
             --default-artifact-root /opt/mlflow/mlruns"
    volumes:
      - ./mlruns:/opt/mlflow/mlruns
    ports: ["5000:5000"]
    restart: always

  # ─────────── Streamlit ───────────
  streamlit:
    image: airflow-custom:latest          # 같은 커스텀 이미지 사용
    container_name: streamlit
    entrypoint: ""                        # Airflow entrypoint 제거
    command: >
      streamlit run /opt/airflow/scripts/streamlit_app.py
      --server.port 8501 --server.address 0.0.0.0
      --server.enableCORS false
    ports: ["8501:8501"]
    volumes:
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    restart: always                       # 컨테이너 재시작 시 자동 실행

  fastapi:
    image: python:3.8-slim
    container_name: fastapi
    working_dir: /opt/fastapi
    entrypoint: >
      sh -c "pip install --no-cache-dir fastapi uvicorn sqlalchemy pandas psycopg2-binary &&
             uvicorn app:app --host 0.0.0.0 --port 8000"
    volumes:
      - ./scripts/api:/opt/fastapi
      - ./scripts:/opt/fastapi/scripts
    ports:
      - "8000:8000"
    restart: always

volumes:
  postgres-db-volume:
